[user]
  name = Antoine Meausoone
  email = {{ github_email }}
  signingkey = {{ gpg_key }}
[init]
  defaultBranch = main              # Set the default branch name to main.
  templateDir = ~/.git-template     # Use a custom template directory, (for configure pre-commit hooks).
[core]
  excludesfile = ~/.gitignore       # Use a global .gitignore file.
  autocrlf = input
[commit]
  template = ~/.gitmessage          # Conventionnal commit message template.
  gpgsign = true                    # Sign commits using GPG.
[color]
  ui = true
[web]
  browser = google-chrome
[credential]
  helper = osxkeychain              # Use the OSX keychain to store credentials.
[gpg]
  program = gpg                     # Use GPG to sign commits.
[push]
  default = simple                  # It will push the current branch to the same branch on the remote repository.
  autoSetupRemote = true            # When pushing a new branch, set it up to track the corresponding remote branch.
[pull]
  rebase = true                     # When pulling, use rebase instead of merge.
[merge]
  tool = kdiff3
[difftool]
  prompt = false
[fetch]
  prune = true                      # Remove remote tracking branches that no longer exist on the remote.
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[alias]
  c = commit
  ca = commit -a  ## Commit all Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.
  cm = commit -m
  cam = commit -am
  d = diff  ## Show changes between commits, commit and working tree, etc
  dc = diff --cached ## will only show changes to files in the "staged" area.
  l = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit ## nice log
  lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg3 = log --all --decorate --oneline --graph
  lg = !"git lg1"
  conflicts = diff --name-only --diff-filter=U
  dog = log --all --decorate --oneline --graph
  grog = log --graph --abbrev-commit --decorate --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)'
[merge]
  tool = intellij
[mergetool "intellij"]
  cmd = idea merge $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE") $(cd $(dirname "$BASE") && pwd)/$(basename "$BASE") $(cd $(dirname "$MERGED") && pwd)/$(basename "$MERGED")
  trustExitCode = true
[diff]
  tool = intellij
[difftool "intellij"]
  cmd = idea diff $(cd $(dirname "$LOCAL") && pwd)/$(basename "$LOCAL") $(cd $(dirname "$REMOTE") && pwd)/$(basename "$REMOTE")
