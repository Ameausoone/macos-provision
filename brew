#!/bin/bash
set -u

# Fail fast with concise message when not using bash
# Single brackets is needed here for POSIX compatibility
# shellcheck disable=SC2292
if [ -z "${BASH_VERSION:-}" ]
then
  echo "Error: Bash is required to run brew." >&2
  exit 1
fi

set +o posix # as we are using bash now

# Fail fast with concise messages when PWD has issues
if [[ -z "${PWD-}" ]]
then
  echo "Error: \$PWD must be set to run brew." >&2
  exit 1
fi
if ! [[ -d "${PWD}" ]]
then
  echo "Error: The current working directory must exist to run brew." >&2
  exit 1
fi
if ! [[ -r "${PWD}" ]]
then
  echo "Error: The current working directory must be readable to ${USER} to run brew." >&2
  exit 1
fi

# Fail fast with concise message when HOME is unset
if [[ -z "${HOME:-}" ]]
then
  echo "Error: \$HOME must be set to run brew." >&2
  exit 1
fi

quiet_cd() {
  CDPATH='' cd -- "$@" &>/dev/null || return
}

symlink_target_directory() {
  local target target_dirname
  target="$(readlink "$1")"
  target_dirname="$(dirname "${target}")"
  local directory="$2"
  quiet_cd "${directory}" && quiet_cd "${target_dirname}" && pwd -P
}

# Enable and use default Bash builtins rather than user-defined functions
builtin enable compgen unset
for cmd in $(builtin compgen -A builtin)
do
  builtin unset -f "${cmd}"
  builtin enable "${cmd}"
done
unset cmd

BREW_FILE_DIRECTORY="$(quiet_cd "${0%/*}/" && pwd -P)"
HOMEBREW_BREW_FILE="${BREW_FILE_DIRECTORY%/}/${0##*/}"
HOMEBREW_PREFIX="${HOMEBREW_BREW_FILE%/*/*}"

# Default to / prefix if unset or the bin/brew file.
if [[ -z "${HOMEBREW_PREFIX}" || "${HOMEBREW_PREFIX}" = "${HOMEBREW_BREW_FILE}" ]]
then
  HOMEBREW_PREFIX="/"
fi

HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}"

# Resolve the bin/brew symlink to find Homebrew's repository
if [[ -L "${HOMEBREW_BREW_FILE}" ]]
then
  BREW_FILE_DIRECTORY="$(symlink_target_directory "${HOMEBREW_BREW_FILE}" "${BREW_FILE_DIRECTORY}")"
  HOMEBREW_REPOSITORY="${BREW_FILE_DIRECTORY%/*}"
fi

# Try to find a /usr/local HOMEBREW_PREFIX where possible (for bottles)
if [[ -L "/usr/local/bin/brew" && ! -L "${HOMEBREW_PREFIX}/Cellar" ]]
then
  USR_LOCAL_BREW_FILE_DIRECTORY="$(symlink_target_directory "/usr/local/bin/brew" "/usr/local/bin")"
  USR_LOCAL_HOMEBREW_REPOSITORY="${USR_LOCAL_BREW_FILE_DIRECTORY%/*}"
  if [[ "${HOMEBREW_REPOSITORY}" = "${USR_LOCAL_HOMEBREW_REPOSITORY}" ]]
  then
    HOMEBREW_PREFIX="/usr/local"
  fi
  unset USR_LOCAL_BREW_FILE_DIRECTORY USR_LOCAL_HOMEBREW_REPOSITORY
fi

unset BREW_FILE_DIRECTORY

# If the location of HOMEBREW_LIBRARY changes
# keg_relocate.rb, formula_cellar_checks.rb, and test/global_spec.rb need to change.
HOMEBREW_LIBRARY="${HOMEBREW_REPOSITORY}/Library"

# Load Homebrew's variable configuration files from disk.
export_homebrew_env_file() {
  local env_file

  env_file="${1}"
  [[ -r "${env_file}" ]] || return 0
  while read -r line
  do
    # only load HOMEBREW_* lines
    [[ "${line}" = "HOMEBREW_"* ]] || continue
    export "${line?}"
  done <"${env_file}"
}

# First, load the system-wide configuration.
unset SYSTEM_ENV_TAKES_PRIORITY
if [[ -n "${HOMEBREW_SYSTEM_ENV_TAKES_PRIORITY-}" ]]
then
  SYSTEM_ENV_TAKES_PRIORITY="1"
else
  export_homebrew_env_file "/etc/homebrew/brew.env"
fi

# Next, load the prefix configuration
export_homebrew_env_file "${HOMEBREW_PREFIX}/etc/homebrew/brew.env"

# Finally, load the user configuration
if [[ -n "${XDG_CONFIG_HOME-}" ]]
then
  HOMEBREW_USER_CONFIG_HOME="${XDG_CONFIG_HOME}/homebrew"
else
  HOMEBREW_USER_CONFIG_HOME="${HOME}/.homebrew"
fi

export_homebrew_env_file "${HOMEBREW_USER_CONFIG_HOME}/brew.env"

# If the system configuration takes priority, load it last.
if [[ -n "${SYSTEM_ENV_TAKES_PRIORITY-}" ]]
then
  export_homebrew_env_file "/etc/homebrew/brew.env"
fi

# Copy and export all HOMEBREW_* variables previously mentioned in
# manpage or used elsewhere by Homebrew.

# These variables are allowed to be set by the user as, e.g., `HOMEBREW_BROWSER`.
MANPAGE_VARS=(
  BAT_CONFIG_PATH
  BAT_THEME
  BROWSER
  DISPLAY
  EDITOR
  NO_COLOR
)
for VAR in "${MANPAGE_VARS[@]}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  VAR_NEW="HOMEBREW_${VAR}"
  # Skip if existing HOMEBREW_* variable is set.
  [[ -n "${!VAR_NEW:-}" ]] && continue
  export "${VAR_NEW}"="${!VAR}"
done

# We don't want to take the user's value for, e.g., `HOMEBREW_PATH` here!
USED_BY_HOMEBREW_VARS=(
  CODESPACES
  COLORTERM
  DBUS_SESSION_BUS_ADDRESS
  NODENV_ROOT
  PATH
  PYENV_ROOT
  RBENV_ROOT
  SSH_TTY
  SUDO_USER
  TMUX
  XDG_CACHE_HOME
  XDG_RUNTIME_DIR
)
for VAR in "${USED_BY_HOMEBREW_VARS[@]}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  # We unconditionally override `HOMEBREW_*` here.
  VAR_NEW="HOMEBREW_${VAR}"
  export "${VAR_NEW}"="${!VAR}"
done

unset VAR VAR_NEW MANPAGE_VARS USED_BY_HOMEBREW_VARS

export HOMEBREW_BREW_FILE
export HOMEBREW_PREFIX
export HOMEBREW_REPOSITORY
export HOMEBREW_LIBRARY
export HOMEBREW_USER_CONFIG_HOME

# set from user environment
# shellcheck disable=SC2154
# Use VISUAL if HOMEBREW_EDITOR and EDITOR are unset.
if [[ -z "${HOMEBREW_EDITOR:-}" && -n "${VISUAL:-}" ]]
then
  export HOMEBREW_EDITOR="${VISUAL}"
fi

# set from user environment
# shellcheck disable=SC2154
# Set CI variable for Azure Pipelines and Jenkins
# (Set by default on GitHub Actions, Circle and Travis CI)
if [[ -z "${CI:-}" ]] && [[ -n "${TF_BUILD:-}" || -n "${JENKINS_HOME:-}" ]]
then
  export CI="1"
fi

if [[ -n "${GITHUB_ACTIONS:-}" && -n "${ImageOS:-}" && -n "${ImageVersion:-}" ]]
then
  export HOMEBREW_GITHUB_HOSTED_RUNNER=1
fi

# filter the user environment
PATH="/usr/bin:/bin:/usr/sbin:/sbin"

FILTERED_ENV=()
ENV_VAR_NAMES=(
  HOME SHELL PATH TERM TERMINFO TERMINFO_DIRS COLUMNS DISPLAY LOGNAME USER CI SSH_AUTH_SOCK SUDO_ASKPASS
  http_proxy https_proxy ftp_proxy no_proxy all_proxy HTTPS_PROXY FTP_PROXY ALL_PROXY
)
# Filter all but the specific variables.
for VAR in "${ENV_VAR_NAMES[@]}" "${!HOMEBREW_@}"
do
  # Skip if variable value is empty.
  [[ -z "${!VAR:-}" ]] && continue

  FILTERED_ENV+=("${VAR}=${!VAR}")
done

if [[ -n "${CI:-}" ]]
then
  for VAR in "${!GITHUB_@}"
  do
    # Skip if variable value is empty.
    [[ -z "${!VAR:-}" ]] && continue
    # Skip variables that look like tokens.
    [[ "${VAR}" = *TOKEN* ]] && continue

    FILTERED_ENV+=("${VAR}=${!VAR}")
  done
fi
unset VAR ENV_VAR_NAMES

exec /usr/bin/env -i "${FILTERED_ENV[@]}" /bin/bash "${HOMEBREW_LIBRARY}/Homebrew/brew.sh" "$@"
